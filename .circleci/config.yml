version: 2.1
setup: true

orbs:
  continuation: circleci/continuation@0.1.2

parameters:
  jobs_file:
    type: string
    default: config_cuenta1.yml      # ok vacío; resolvemos en el job
  workflow_files_csv:
    type: string
    default: ""      # ok vacío; resolvemos en el job

workflows:
  setup:
    jobs:
      - trigger_pipeline   # 👈 sin argumentos aquí

jobs:
  trigger_pipeline:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout

      - run:
          name: Instalar yq y jq
          command: |
            set -e
            mkdir -p ~/bin
            YQ_VERSION=v4.43.1
            wget -q https://github.com/mikefarah/yq/releases/download/$YQ_VERSION/yq_linux_amd64 -O ~/bin/yq
            chmod +x ~/bin/yq
            echo 'export PATH="$HOME/bin:$PATH"' >> $BASH_ENV
            source $BASH_ENV
            yq --version
            if ! command -v jq >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y jq
            fi
            jq --version

      - run:
          name: Resolver parámetros desde UI o archivos locales
          command: |
            set -euo pipefail
            echo "CIRCLE_PIPELINE_PARAMETERS: ${CIRCLE_PIPELINE_PARAMETERS:-}"

            # 1) Intentar leer desde UI (pipeline setup)
            JOBS_FILE="$(echo "${CIRCLE_PIPELINE_PARAMETERS:-}" | jq -r '.jobs_file // empty' 2>/dev/null || true)"
            WF_INPUT="$(echo "${CIRCLE_PIPELINE_PARAMETERS:-}" | jq -r '.workflow_files_csv // empty' 2>/dev/null || true)"

            # 2) Si workflow_files_csv NO vino por UI: usar archivo JSON o CSV del repo
            if [[ -z "${WF_INPUT}" ]]; then
              if [[ -f ".circleci/workflows_list.json" ]]; then
                echo "📄 Leyendo .circleci/workflows_list.json"
                WF_INPUT="$(jq -r 'join(",")' .circleci/workflows_list.json)"
              elif [[ -f ".circleci/workflows_list.csv" ]]; then
                echo "📄 Leyendo .circleci/workflows_list.csv"
                WF_INPUT="$(paste -sd, .circleci/workflows_list.csv)"
              else
                echo "❌ No se definió 'workflow_files_csv' ni existen .circleci/workflows_list.json/.csv"
                exit 1
              fi
            fi

            # 3) jobs_file: si no vino por UI, usa archivo opcional o default
            if [[ -z "${JOBS_FILE}" ]]; then
              if [[ -f ".circleci/jobs_file.txt" ]]; then
                echo "📄 Leyendo .circleci/jobs_file.txt"
                JOBS_FILE="$(head -n1 .circleci/jobs_file.txt | xargs)"
              else
                JOBS_FILE="config_cuenta1.yml"
              fi
            fi

            echo "✅ Usando jobs_file=${JOBS_FILE}"
            echo "✅ Usando workflow_files_csv=${WF_INPUT}"

            echo "export JOBS_FILE=\"${JOBS_FILE}\"" >> "$BASH_ENV"
            echo "export WF_INPUT=\"${WF_INPUT}\""   >> "$BASH_ENV"
            source "$BASH_ENV"

      - run:
          name: Combinar jobs + workflows seleccionados
          command: |
            set -e
            bash .circleci/build_config.sh "${JOBS_FILE}" "${WF_INPUT}"

      - continuation/continue:
          configuration_path: .circleci/config_final.yml
